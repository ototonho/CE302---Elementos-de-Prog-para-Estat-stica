---
title: "Aula 27 de novembro"
format: pdf
editor: visual
---

## 27 de Novembro

```{r}
require(tidyverse)
require(magrittr)

#system = list("Filmes)
files = list.files("filmes")
```

**Abrindo os arquivos.**

```{r}
Files = list()
for (i in 1:length(files)) {
 Files [[i]] = data.table::fread(paste0("filmes/", files[i])) %>%
   mutate(year = as.numeric(year))
}
```

Unindo as tabelas

```{r}
Files[[1]]$movie_id


Files %<>% bind_rows()
```

Gráfico de Dispersão

```{r}
##Gráfico de Dispersão
Files %>% # Carregar o banco
  ggplot() + ## Chamar o ggplot
  aes( x = year, y = `gross(in $)`,
       color = tipo, #size por ano
       size = year) + ## aplicar a estética, isto é, quais são as variáveis e o que elas significam, x e y, neste caso
  geom_point(alpha = 0.2) +
  scale_size_continuous(range = c(0, 2)) + 
  theme_minimal() # Fazer o scatterplot
```

Gráfico de Dispersão facetado

```{r}
#Facetar
Files %>% 
  ggplot() +
  aes( x = year, 
       y = `gross(in $)`, 
       color = tipo,
       size = rating) + #tamanho por rating
  geom_point(alpha = 0.2) + 
  scale_size_continuous(range = c(0, 2)) + 
  facet_wrap(vars(tipo), scales = "fixed") + ## Fazemos o gráfico separado por tipo
  theme_minimal()
```

Gráfico filtrado

```{r}
Files %>% 
  filter(tipo %in% "animation") %>% 
  ggplot() +
  aes( x = year, 
       y = `gross(in $)`, 
       color = tipo, 
       size = rating) + 
  geom_point(alpha = 0.2) + 
  scale_size_continuous(range = c(0, 2)) + 
  scale_y_continuous(breaks = c(0, 1000, 100000)) + #se usar transform = "log10", joga pra cima / labels = scales::label_log(), trans = "log10
  theme_minimal() +
  labs(x = "Ano",
       y = "Faturamento (em US$)",
       size = "Nota",
       color = "Tipo") +
  theme(legend.position = "bottom",
        text = element_text(size = 14))
```

Para linhas de tendência

```{r}
Files %>% 
  filter(tipo %in% "animation") %>% 
  ggplot() +
  aes( x = year, 
       y = `gross(in $)`, 
       color = tipo, 
       size = rating) + 
  geom_point(alpha = 0.2) + 
  geom_smooth(method = "loess") + # O método aqui se refere ao método utilizado para estimação da curva
  scale_size_continuous(range = c(0, 2)) + 
  scale_y_continuous(breaks = c(0, 1000, 100000)) + #se usar transform = "log10", joga pra cima / labels = scales::label_log(), trans = "log10
  theme_minimal() +
  labs(x = "Ano",
       y = "Faturamento (em US$)",
       size = "Nota",
       color = "Tipo") +
  theme(legend.position = "bottom",
        text = element_text(size = 14))
```

Para gráficos em linhas

```{r}
Files %>% 
  group_by(year, tipo) %>% 
  summarise(Valor_Gasto_Medio = mean(`gross(in $)`, na.rm = TRUE)) %>%
  ggplot() +
  aes( x = year, 
       y = Valor_Gasto_Medio, 
       color = tipo) + 
  geom_line(alpha = 0.5) + 
  geom_point() +
  facet_wrap(vars(tipo)) + 
  theme_minimal()
```

Para gasto médio e coisas de trabalho com legenda

```{r}
Files %>% 
  group_by(year) %>% 
  summarise(Valor_Gasto_Medio = mean(`gross(in $)`, na.rm = TRUE)) %>%
  ggplot() +
  aes( x = year, 
       y = Valor_Gasto_Medio) + 
  geom_line(alpha = 0.2) + 
  geom_point() + 
  labs(x = "Ano de Lançamento", 
       y = "Investimento ($)", 
       title = "Gráfico do investimento médio em filmes por ano") + 
  scale_y_continuous(labels = scales::label_dollar()) +
  scale_x_continuous(breaks = seq(from = 1900, to = 2020, by = 10)) + 
  theme_minimal() +
  theme(text = element_text(size = 12, 
                            hjust = 0.5, 
                            face = "bold")) # tamanho da fonte
```

Gráfico de barras com geom_col

```{r}
Files %>% 
  group_by(tipo) %>% 
  summarise(Total_Investido = sum(`gross(in $)`, na.rm = TRUE)) %>%
  mutate(tipo = reorder(tipo, Total_Investido)) %>% 
  ggplot() +
  aes( x = tipo, 
       y = Total_Investido, 
       color = tipo, 
       fill = tipo) +
  geom_col(alpha = 0.2, 
           ltw = 2) + 
  scale_y_continuous(labels = scales::label_dollar()) +
  coord_flip() +
  labs(x = "Tipo de Filme", 
       y = "Total Investido ($)") + 
  theme_minimal() +
  theme(legend.position = "none")
```

Para cada categoria ter sua própria escala por ano - e inverteu a coordenada

```{r}
Files %>% 
  mutate(tipo = stringr::str_to_title(tipo)) %>% 
  mutate(ano_categorico = case_when(year < 1900 ~ "< 1900", 
                                    year < 1925 ~ "< 1925", 
                                    year < 1950 ~ "< 1950", 
                                    year < 1975 ~ "< 1975", 
                                    year < 2000 ~ "< 2000", 
                                    year < 2025 ~ "< 2025")) %>%
  group_by(tipo, ano_categorico) %>% 
  summarise(Total_Investido = sum(`gross(in $)`, na.rm = TRUE)) %>%
  ungroup() %>% 
  group_by(tipo) %>% 
  mutate(total = sum(Total_Investido, na.rm = TRUE)) %>%
  ggplot() +
  aes( x = reorder(tipo, total), 
       y = Total_Investido, 
       color = ano_categorico, 
       fill = ano_categorico) +
  geom_col() + 
  scale_y_continuous(labels = scales::label_dollar()) +
  scale_color_manual(values = colorRampPalette(c("Blue", "Pink"))(7)) + 
  scale_fill_manual(values = colorRampPalette(c("Blue", "Pink"))(7)) + 
  
  coord_flip() +
  labs(x = "Tipo de Filme", 
       y = "Total Investido ($)",
       color = "Ano", 
       fill = "Ano") + 
  theme_minimal() +
  theme(legend.position = "bottom", 
        text = element_text(size = 18))
```

Histograma

```{r}
ggplot(Files) +
  aes(x = rating) +
  geom_histogram(bins = 100, fill = "#555555") + #o próprio usuário precisa dizer quantas bins acha necessário
  theme_minimal()

```

Densidade

```{r}
ggplot(Files) +
  aes(x = rating, fill = tipo, color = tipo) +
  geom_density(alpha = 0.1) +
  theme_minimal() +
  theme(legend.position = "bottom")

#Separados
ggplot(Files) +
  aes(x = rating, fill = tipo, color = tipo) +
  geom_density(alpha = 0.1) +
  facet_wrap(vars(tipo)) + 
  theme_minimal() +
  theme(legend.position = "none")
```

Boxplot

```{r}
ggplot(Files) +
  aes(x = rating, fill = tipo, color = tipo) +
  geom_boxplot(alpha = 0.1) +
  theme_minimal() +
  theme(legend.position = "none")

#Mais pica
ggplot(Files) +
  aes(x = rating, 
      y = tipo, 
      fill = tipo, 
      color = tipo) +
  geom_boxplot(alpha = 0.1, 
               outlier.shape = NA) +
  geom_jitter(size = 0.1, 
              alpha = 0.1, 
              pch = 20) + 
  theme_minimal() +
  theme(legend.position = "none")
```

Violino

```{r}
ggplot(Files) +
  aes(x = rating, y = tipo, color = tipo) +
  geom_violin(alpha = 0.1) +
  theme_minimal() +
  theme(legend.position = "none")

#Boxplot dentro do violino
ggplot(Files) +
  aes(x = rating, y = 1) +
  geom_violin(alpha = 0.1) +
  geom_boxplot(width = 0.4) + 
  theme_minimal() +
  theme(legend.position = "none")
```

Gráfico de Contorno

```{r}
Files %>%
  filter(tipo %in% c("war", "animation", "horror")) %>%
  mutate(runtime_num = stringr::str_remove(runtime, "min") %>% 
           str_squish() %>% 
           as.numeric()) %>% 
  filter(!is.na(runtime_num)) %>% 
  filter(`gross(in $)` > 0 | !is.na(`gross(in $)`)) %>% 
  ggplot() + 
  aes(x = year, 
      y = runtime_num) + 
  geom_density_2d_filled(contour_var = "density") +
  theme_minimal() + 
  theme(legend.position = "none") +
  facet_wrap(vars(tipo), scales = "free")
```

Salvar imagem

```{r}
#Salvar imagem
pdf("CE302---Elementos-de-Prog-para-Estat-stica/Gráfico1.pdf", width = 1200, height = 800)
##tem o problema de carregar coisas do R que nao funcionam em outros softwares e lê-se como cruzes
dev.off() #Encerra, antes tudo é salvo
##portanto, usa-se a biblioteca Cairo
Cairo::CairoPDF("CE302---Elementos-de-Prog-para-Estat-stica/Gráfico1.pdf", width = 1200, height = 800)
dev.off() 

```

**Esquisse** 
- Ele gera o código!!!
 + Copiar código ali na área de colar no console.
```{r}
##Addins -> esquisse -> ggplot
```
