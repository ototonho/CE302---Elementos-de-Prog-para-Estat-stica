---
title: "Exercícios de Estruturas de Repetição e Funções"
format: pdf
editor: visual
theme: lux
fontcolor: "#212121"
---

# Estruturas de Repetição e Funções

## Questão 1

### Dado o conjunto de números naturais entre 1 e 500.000, resolva as questões a seguir:

*1. Quantos números primos existem neste intervalo?*

Dica: Crie uma função chamada contar_primos(limite) que receba um número limite (neste caso, 500.000) e retorne a quantidade de números primos encontrados.

```{r}
primo <- function(n) {
  if (n <= 1) return(FALSE)
  if (n == 2) return(TRUE)
  if (n %% 2 == 0) return(FALSE)
  

  for (i in seq(3, floor(sqrt(n)), by = 2)) {
    if (n %% i == 0) return(FALSE)
  }
  
  return(TRUE)
}

contar_primos <- function(i){
  conta_primos <- 0
  for (n in i:500000) {
    if (primo(n)) {
      conta_primos <- conta_primos + 1
    }
  }
  return(conta_primos)
}

i <- 50
contar_primos(i)
```

*2. Quantos números pertencem à sequência ( S_i ), definida por*:

[ S_i = i + frac{i^2}{2}]

Condição: Considere apenas os números de ( S_i ) no intervalo [1, 500.000]. **Dica: Implemente uma função chamada calcular_sequencia(limite) que retorne os números ( S_i ) que atendem à condição.**

```{r}
calcular_sequencia <- function(limite) {
  sequencia <- c()
  for (i in 1:limite) {
    S_i <- i + (i^2) / 2
    if (S_i >= 1 && S_i <= 500000) {
      sequencia <- c(sequencia, S_i)
    }
  }
  return(sequencia)
}

limite <- 500000
calcular_sequencia(limite)
length(calcular_sequencia(limite))
```

## Questão 2

### Faça um programa que calcule o novo salário de um funcionário com base no código de seu cargo, de acordo com a tabela abaixo:


| Código | Cargo           | Aumento |
|--------|-----------------|---------|
| 1      | Estagiário      | 10%     |
| 2      | Analista Jr     | 20%     |
| 3      | Analista Pleno  | 22%     |
| 4      | Analista Senior | 25%     |
| 5      | Especialista    | 28%     |

*1.  Implemente uma função chamada calcular_aumento(codigo, salario) que receba o código do cargo e o salário atual, e retorne o valor do aumento e o novo salário.*

```{r}

# Função para calcular o aumento de salário
calcular_aumento <- function(codigo, salario) {
  # Verifica se o código do cargo é válido
  if (codigo < 1 || codigo > 5) {
    stop("Código inválido. O código deve estar entre 1 e 5.")
  }
  
  # Verifica se o salário é válido
  if (salario <= 0) {
    stop("Salário inválido. O salário deve ser maior que zero.")
  }
  
  # Inicializa a variável percentual com valor 0
  percentual <- 0
  
  # Atribui o percentual de aumento conforme o código do cargo
  if (codigo == 1) {
    percentual <- 0.10  # 10% de aumento para Estagiário
  } else if (codigo == 2) {
    percentual <- 0.20  # 20% de aumento para Analista Jr
  } else if (codigo == 3) {
    percentual <- 0.22  # 22% de aumento para Analista Pleno
  } else if (codigo == 4) {
    percentual <- 0.25  # 25% de aumento para Analista Senior
  } else if (codigo == 5) {
    percentual <- 0.28  # 28% de aumento para Especialista
  }
  
  # Calcula o valor do aumento e o novo salário
  aumento <- salario * percentual
  novo_salario <- salario + aumento
  
  # Retorna o aumento e o novo salário em uma lista
  return(list(aumento = aumento, novo_salario = novo_salario))
}

# Leitura dos dados
codigo <- as.numeric(readline(prompt = "Digite o código do cargo (1 a 5): "))
salario <- as.numeric(readline(prompt = "Digite o salário atual: "))

# Chama a função para calcular o aumento
resultado <- calcular_aumento(codigo, salario)

# Exibe o resultado
cat("Aumento: R$", round(resultado$aumento, 2), "\n")
cat("Novo salário: R$", round(resultado$novo_salario, 2), "\n")


```

*2.  Aplique a função sobre uma lista de funcionários com diferentes cargos e salários, e exiba os resultados.*

```{r}
funcionarios <- data.frame(
  Nome = c("Melissa", "Alice", "Cecília", "Anderson", "Rubão", "Odoacro"),
  Codigo_Cargo = c(1, 2, 3, 3, 4, 5),
  Salario_atual = c(1200, 2500, 3300, 3500, 4500, 6000)
)

resultado <- apply(funcionarios, 1, function(row){
  calculo <- calcular_aumento(as.numeric(row["Codigo_Cargo"]), as.numeric(row["Salario_atual"]))
  c(Aumento = calculo$aumento, Novo_Salario = calculo$novo_salario)
})

resultado <- t(resultado)
colnames(resultado) <- c("Aumento", "Novo_Salario")
funcionarios <- cbind(funcionarios, resultado)
```

## Questão 3

### Um indivíduo possui três meios de transporte e escolhe o mais apropriado com base nas condições abaixo:


1.  Escolha do meio de transporte com base na distância:

-   Mais de 500 km: Avião.
-   Entre 50 e 500 km: Carro.
-   Menos de 50 km: Bicicleta.

2.  Escolha do combustível quando usa o carro:

-   Etanol: até 75% do preço da gasolina.
-   GNV: até 60% do preço da gasolina.
-   Caso contrário: Gasolina.

**Implemente as seguintes funções**:

*1. escolher_transporte(distancia)* - Retorna o meio de transporte ideal com base na distância.

```{r}
escolher_transporte <- function(distancia){
  veiculo <- NULL
  
  if (distancia <= 50) {
    veiculo <- "bicicleta"
  } else if (distancia > 50 & distancia <= 500) {
    veiculo <- "carro"
  } else if (distancia > 500) {
    veiculo <- "avião"
  } else {
    stop("Digite novamente uma distância válida.")
  }
  
   return(paste("O meio de transporte ideal é:", veiculo))
}
distancia <- as.numeric(readline(prompt = "Digite a distância (em km): "))

resultado <- escolher_transporte(distancia)
print(resultado)
```

*2. escolher_combustivel(preco_gasolina, preco_etanol, preco_gnv)* - Retorna o combustível ideal baseado nos preços atuais.

```{r}
escolher_combustivel <- function(preco_gasolina, preco_etanol, preco_gnv) {
  if (preco_etanol <= 0.75 * preco_gasolina) {
    return("Etanol")
  } else if (preco_gnv <= 0.60 * preco_gasolina) {
    return("GNV")
  } else {
    return("Gasolina")
  }
}
```


3.  Utilize as funções para responder:

-   Qual transporte e combustível o indivíduo deve escolher para ir:
    -   A Florianópolis (750 km).
    -   A Natal (3.000 km).
    -   A Araucária (25 km).

```{r}
##Aplicação para as cidades dadas:

# Florianópolis (750 km)
transporte_florianopolis <- escolher_transporte(750)
combustivel_florianopolis <- NA  # Não aplicável, pois o transporte é o avião

# Natal (3.000 km)
transporte_natal <- escolher_transporte(3000)
combustivel_natal <- NA  # Não aplicável, pois o transporte é o avião

# Araucária (25 km)
transporte_araucaria <- escolher_transporte(25)
combustivel_araucaria <- NA  # Não aplicável, pois o transporte é a bicicleta

# Exibir resultados
cat("Florianópolis (750 km): Transporte:", transporte_florianopolis, "\n")
cat("Natal (3.000 km): Transporte:", transporte_natal, "\n")
cat("Araucária (25 km): Transporte:", transporte_araucaria, "\n")
```

## Questão 4

### Crie uma matriz ( M ) ( 10 \times 10 ) preenchida com números aleatórios entre 1 e 100. Desenvolva as seguintes funções para manipular a matriz:


1. soma_linha(matriz, linha) - Calcula a soma dos elementos de uma linha específica.

2. soma_coluna(matriz, coluna) - Calcula a soma dos elementos de uma coluna específica.

3. diagonal_principal(matriz) - Retorna os elementos da diagonal principal.

4 diagonal_secundaria(matriz) - Retorna os elementos da diagonal secundária.


*Teste todas as funções percorrendo a matriz. Mostre*:

- A soma dos elementos de cada linha.

- A soma dos elementos de cada coluna.

- Os elementos da diagonal principal e secundária.

```{r}
# Criar matriz M 10x10 com números aleatórios entre 1 e 100
set.seed(123)  # Para reprodutibilidade
M <- matrix(sample(1:100, 100, replace = TRUE), nrow = 10, ncol = 10)


# 1. Função para calcular a soma dos elementos de uma linha específica
soma_linha <- function(matriz, linha) {
  return(sum(matriz[linha, ]))
}

# 2. Função para calcular a soma dos elementos de uma coluna específica
soma_coluna <- function(matriz, coluna) {
  return(sum(matriz[, coluna]))
}

# 3. Função para retornar os elementos da diagonal principal
diagonal_principal <- function(matriz) {
  return(diag(matriz))
}

# 4. Função para retornar os elementos da diagonal secundária
diagonal_secundaria <- function(matriz) {
  return(diag(matriz[, ncol(matriz):1]))
}

## Testando as funções
# Mostrar a matriz gerada
cat("Matriz M (10x10):\n")
print(M)

# A soma dos elementos de cada linha
cat("\nSoma dos elementos de cada linha:\n")
for (i in 1:nrow(M)) {
  cat("Linha", i, ":", soma_linha(M, i), "\n")
}

# A soma dos elementos de cada coluna
cat("\nSoma dos elementos de cada coluna:\n")
for (j in 1:ncol(M)) {
  cat("Coluna", j, ":", soma_coluna(M, j), "\n")
}

# Elementos da diagonal principal
cat("\nElementos da diagonal principal:\n")
print(diagonal_principal(M))

# Elementos da diagonal secundária
cat("\nElementos da diagonal secundária:\n")
print(diagonal_secundaria(M))
```

## Questão 5

### Implemente um programa para determinar se uma matriz é simétrica. Para isso:

1. Crie a função verificar_simetria(matriz) que receba uma matriz quadrada e retorne se ela é simétrica ou não.

2. Preencha a matriz com valores aleatórios e verifique sua simetria.

```{r}
# Função para verificar se a matriz é simétrica
verificar_simetria <- function(matriz) {
  # Verifica se a matriz é quadrada
  if (nrow(matriz) != ncol(matriz)) {
    return("A matriz não é quadrada!")
  }
  
  # Compara a matriz com sua transposta
  if (all(matriz == t(matriz))) {
    return("A matriz é simétrica!")
  } else {
    return("A matriz não é simétrica!")
  }
}

# Função para gerar uma matriz aleatória quadrada
gerar_matriz <- function(n) {
  # Gera uma matriz n x n com valores aleatórios entre 1 e 100
  matriz <- matrix(sample(1:100, n^2, replace = TRUE), nrow = n, ncol = n)
  return(matriz)
}

# Exemplo de uso:
set.seed(123)  # Definindo semente para reprodutibilidade
n <- 4  # Tamanho da matriz
matriz <- gerar_matriz(n)
print("Matriz gerada:")
print(matriz)

# Verifica se a matriz gerada é simétrica
resultado <- verificar_simetria(matriz)
print(resultado)

```

## Questão 6

### Implemente um programa para calcular as seguintes operações sobre uma matriz de números inteiros ( M ) ( 5 \times 5 ):

1. maior_valor(matriz) - Retorna o maior valor contido na matriz.

2. menor_valor(matriz) - Retorna o menor valor contido na matriz.

3. media_geral(matriz) - Retorna a média aritmética de todos os elementos da matriz.

4. Aplique as funções sobre a matriz e exiba os resultados.

```{r}
# Função para calcular o maior valor da matriz
maior_valor <- function(matriz) {
  return(max(matriz))
}

# Função para calcular o menor valor da matriz
menor_valor <- function(matriz) {
  return(min(matriz))
}

# Função para calcular a média geral da matriz
media_geral <- function(matriz) {
  return(mean(matriz))
}

# Função para gerar a matriz 5x5 com números inteiros aleatórios
gerar_matriz <- function() {
  matriz <- matrix(sample(1:100, 25, replace = TRUE), nrow = 5, ncol = 5)
  return(matriz)
}

# Exemplo de uso:
set.seed(123)  # Definindo semente para reprodutibilidade
matriz <- gerar_matriz()
print("Matriz gerada:")
print(matriz)

# Calcula e exibe os resultados
maior <- maior_valor(matriz)
menor <- menor_valor(matriz)
media <- media_geral(matriz)

cat("Maior valor da matriz: ", maior, "\n")
cat("Menor valor da matriz: ", menor, "\n")
cat("Média geral da matriz: ", media, "\n")

```

## Questão 7

### Dado um vetor ( V ) contendo 100 elementos aleatórios entre 1 e 1.000:

1. Crie uma função par_impar(vetor) que retorne dois vetores: um contendo apenas os números pares e outro com os números ímpares.

2. Aplique a função sobre ( V ) e calcule a média dos elementos pares e ímpares separadamente.

```{r}
# Função para separar os números pares e ímpares
par_impar <- function(vetor) {
  # Separando os números pares e ímpares
  pares <- vetor[vetor %% 2 == 0]
  impares <- vetor[vetor %% 2 != 0]
  
  # Retorna os dois vetores (pares e ímpares)
  return(list(pares = pares, impares = impares))
}

# Gerar o vetor V com 100 elementos aleatórios entre 1 e 1000
set.seed(123)  # Definindo semente para reprodutibilidade
V <- sample(1:1000, 100, replace = TRUE)

# Aplicando a função par_impar sobre o vetor V
resultados <- par_impar(V)

# Calculando a média dos elementos pares e ímpares
media_pares <- mean(resultados$pares)
media_impares <- mean(resultados$impares)

# Exibindo os resultados
cat("Média dos elementos pares: ", media_pares, "\n")
cat("Média dos elementos ímpares: ", media_impares, "\n")

```

## Questão 8

### Dada uma matriz ( N ) ( 6 \times 6 ), implemente um programa para encontrar:

1. A soma dos elementos acima da diagonal principal.

2. A soma dos elementos abaixo da diagonal principal.

3. Implemente as funções soma_acima_diagonal(matriz) e soma_abaixo_diagonal(matriz) e aplique sobre ( N ).

```{r}
# Função para calcular a soma dos elementos acima da diagonal principal
soma_acima_diagonal <- function(matriz) {
  soma <- 0
  # Percorrer as linhas acima da diagonal principal
  for (i in 1:(nrow(matriz)-1)) {
    for (j in (i+1):ncol(matriz)) {
      soma <- soma + matriz[i, j]
    }
  }
  return(soma)
}

# Função para calcular a soma dos elementos abaixo da diagonal principal
soma_abaixo_diagonal <- function(matriz) {
  soma <- 0
  # Percorrer as linhas abaixo da diagonal principal
  for (i in 2:nrow(matriz)) {
    for (j in 1:(i-1)) {
      soma <- soma + matriz[i, j]
    }
  }
  return(soma)
}

# Gerar a matriz N com 6x6 de números aleatórios entre 1 e 100
set.seed(123)  # Definindo semente para reprodutibilidade
N <- matrix(sample(1:100, 36, replace = TRUE), nrow = 6)

# Exibindo a matriz gerada
cat("Matriz N:\n")
print(N)

# Calculando a soma dos elementos acima e abaixo da diagonal
soma_acima <- soma_acima_diagonal(N)
soma_abaixo <- soma_abaixo_diagonal(N)

# Exibindo os resultados
cat("\nSoma dos elementos acima da diagonal principal: ", soma_acima, "\n")
cat("Soma dos elementos abaixo da diagonal principal: ", soma_abaixo, "\n")

```


## Questão 9

1 Crie uma função que calcula o fatorial de um número ( n ).

2. Crie uma função que dado um número, retorna o número primo mais próximo.

3. Crie uma função que dado um número, retorna o número quadrado perfeito mais próximo.

4. Crie uma função que dado um número, retorna o resto da divisão por 3.

5. Varra uma matriz de 20x20 com números aleatórios entre 1 e 1000 e aplique as funções criadas sobre cada elemento da matriz segundo as seguintes regras:

+ Se o número for par e menor do que 10, aplique a função do fatorial.

+ Se o número for ímpar, aplique a função do número primo mais próximo.

+ Se o número for maior do que 10 e menor do que 100, aplique a função do número quadrado perfeito mais próximo.

+ Se o número for maior do que 100, aplique a função do resto da divisão por 3.

+ Retorne 0 caso contrário.

```{r}
# Função para calcular o fatorial de um número
fatorial <- function(n) {
  if (n == 0) return(1)
  return(prod(1:n))
}

# Função para verificar se um número é primo
eh_primo <- function(n) {
  if (n <= 1) return(FALSE)
  for (i in 2:sqrt(n)) {
    if (n %% i == 0) return(FALSE)
  }
  return(TRUE)
}

# Função para encontrar o número primo mais próximo
numero_primo_mais_proximo <- function(n) {
  i <- 0
  while (TRUE) {
    if (eh_primo(n - i)) return(n - i)
    if (eh_primo(n + i)) return(n + i)
    i <- i + 1
  }
}

# Função para encontrar o quadrado perfeito mais próximo
quadrado_perfeito_mais_proximo <- function(n) {
  lower <- floor(sqrt(n))^2
  upper <- (floor(sqrt(n)) + 1)^2
  if (abs(lower - n) <= abs(upper - n)) {
    return(lower)
  }
  return(upper)
}

# Função para calcular o resto da divisão por 3
resto_divisao_por_3 <- function(n) {
  return(n %% 3)
}

# Função para aplicar as regras sobre cada elemento da matriz
aplicar_regras <- function(matriz) {
  resultado <- matriz
  for (i in 1:nrow(matriz)) {
    for (j in 1:ncol(matriz)) {
      valor <- matriz[i, j]
      
      if (valor %% 2 == 0 && valor < 10) {
        # Fatorial se o número for par e menor que 10
        resultado[i, j] <- fatorial(valor)
      } else if (valor %% 2 != 0) {
        # Número primo mais próximo se o número for ímpar
        resultado[i, j] <- numero_primo_mais_proximo(valor)
      } else if (valor > 10 && valor < 100) {
        # Quadrado perfeito mais próximo se o número for maior que 10 e menor que 100
        resultado[i, j] <- quadrado_perfeito_mais_proximo(valor)
      } else if (valor > 100) {
        # Resto da divisão por 3 se o número for maior que 100
        resultado[i, j] <- resto_divisao_por_3(valor)
      } else {
        resultado[i, j] <- 0
      }
    }
  }
  return(resultado)
}

# Gerar a matriz 20x20 com números aleatórios entre 1 e 1000
set.seed(123)  # Definir semente para resultados reprodutíveis
matriz <- matrix(sample(1:1000, 400, replace = TRUE), nrow = 20, ncol = 20)

# Exibir a matriz original
cat("Matriz original:\n")
print(matriz)

# Aplicar as funções sobre a matriz
matriz_resultado <- aplicar_regras(matriz)

# Exibir a matriz resultado
cat("\nMatriz com resultados aplicados:\n")
print(matriz_resultado)

```

